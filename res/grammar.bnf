// statements
program       ::= declaration* EOF ;
declaration   ::= varDeclaration | funDeclaration | statement ;
statement     ::= exprStatement | printStatement | ifStatement | whileStatement | forStatement | block ;
forStatement  ::= "for" "(" ( varDeclaration | exprStatement | ";" ) expression? ";" expression? ")" statement ;
whileStatement::= "while" "(" expression ")" statement ;
ifStatement   ::= "if" "(" expression ")" statement ( "else" statement )?;
block         ::= "{" declaration* "}" ;
exprStatement ::= expression ";" ;
printStatement ::= "print" expression ";" ;
varDeclaration ::= "var" IDENTIFIER ( "=" expression )? ";" ;
funDeclaration ::= "fun" function;
function       ::= IDENTIFIER "(" parameters* ")" block ;
parameters     ::= IDENTIFIER ( "," IDENTIFIER )* ;

// expressions
expression ::= assignment ;
assignment ::= IDENTIFIER "=" assignment | ternary
ternary    ::= logic_or "?" logic_or ":" logic_or ;
logic_or   ::= logic_and ( "or" logic_and )* ;
logic_and  ::= equality ( "and" equality )* ;
equality   ::= comparison ( ( "!=" | "==" ) comparison )* ;
comparison ::= term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term       ::= factor ( ( "-" | "+" ) factor )* ;
factor     ::= unary ( ( "/" | "*" ) unary )* ;
unary      ::= ( "!" | "-" ) unary
             | call ;
call       ::= primary ( "(" arguments? ")" )* ;
arguments  ::= expression ( "," expression )* ;
primary    ::= NUMBER | STRING | "true" | "false" | "nil"
             | "(" expression ")" | IDENTIFIER ;